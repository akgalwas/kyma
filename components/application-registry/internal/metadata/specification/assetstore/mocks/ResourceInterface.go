// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// ResourceInterface is an autogenerated mock type for the ResourceInterface type
type ResourceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: obj
func (_m *ResourceInterface) Create(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {
	ret := _m.Called(obj)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) *unstructured.Unstructured); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, opts
func (_m *ResourceInterface) Delete(name string, opts *v1.DeleteOptions) error {
	ret := _m.Called(name, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v1.DeleteOptions) error); ok {
		r0 = rf(name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name, opts
func (_m *ResourceInterface) Get(name string, opts v1.GetOptions) (*unstructured.Unstructured, error) {
	ret := _m.Called(name, opts)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(string, v1.GetOptions) *unstructured.Unstructured); ok {
		r0 = rf(name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.GetOptions) error); ok {
		r1 = rf(name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: obj
func (_m *ResourceInterface) Update(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {
	ret := _m.Called(obj)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) *unstructured.Unstructured); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
