// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import apperrors "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/apperrors"
import mock "github.com/stretchr/testify/mock"
import model "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/kyma/apiresources/secrets/model"
import types "k8s.io/apimachinery/pkg/types"
import v1alpha1 "github.com/kyma-project/kyma/components/application-operator/pkg/apis/applicationconnector/v1alpha1"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateApiResources provides a mock function with given fields: applicationName, applicationUID, serviceID, serviceName, credentials, spec
func (_m *Service) CreateApiResources(applicationName string, applicationUID types.UID, serviceID string, serviceName string, credentials *model.CredentialsWithCSRF, spec []byte) apperrors.AppError {
	ret := _m.Called(applicationName, applicationUID, serviceID, serviceName, credentials, spec)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, types.UID, string, string, *model.CredentialsWithCSRF, []byte) apperrors.AppError); ok {
		r0 = rf(applicationName, applicationUID, serviceID, serviceName, credentials, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// DeleteApiResources provides a mock function with given fields: application, apiDefinition
func (_m *Service) DeleteApiResources(application v1alpha1.Application, apiDefinition v1alpha1.Service) apperrors.AppError {
	ret := _m.Called(application, apiDefinition)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(v1alpha1.Application, v1alpha1.Service) apperrors.AppError); ok {
		r0 = rf(application, apiDefinition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// UpdateApiResources provides a mock function with given fields: applicationName, applicationUID, serviceID, serviceName, credentials, spec
func (_m *Service) UpdateApiResources(applicationName string, applicationUID types.UID, serviceID string, serviceName string, credentials *model.CredentialsWithCSRF, spec []byte) apperrors.AppError {
	ret := _m.Called(applicationName, applicationUID, serviceID, serviceName, credentials, spec)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, types.UID, string, string, *model.CredentialsWithCSRF, []byte) apperrors.AppError); ok {
		r0 = rf(applicationName, applicationUID, serviceID, serviceName, credentials, spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
